/**
 * This class is generated by jOOQ
 */
package org.jooq.generated.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.records.AlbumSongRecord;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumSong extends TableImpl<AlbumSongRecord> {

	private static final long serialVersionUID = 1918637531;

	/**
	 * The reference instance of <code>PUBLIC.ALBUM_SONG</code>
	 */
	public static final AlbumSong ALBUM_SONG = new AlbumSong();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AlbumSongRecord> getRecordType() {
		return AlbumSongRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ALBUM_SONG.ALBUM_ID</code>.
	 */
	public final TableField<AlbumSongRecord, Integer> ALBUM_ID = createField("ALBUM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ALBUM_SONG.SONG_ID</code>.
	 */
	public final TableField<AlbumSongRecord, Integer> SONG_ID = createField("SONG_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.ALBUM_SONG</code> table reference
	 */
	public AlbumSong() {
		this("ALBUM_SONG", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ALBUM_SONG</code> table reference
	 */
	public AlbumSong(String alias) {
		this(alias, ALBUM_SONG);
	}

	private AlbumSong(String alias, Table<AlbumSongRecord> aliased) {
		this(alias, aliased, null);
	}

	private AlbumSong(String alias, Table<AlbumSongRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AlbumSongRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_E;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AlbumSongRecord>> getKeys() {
		return Arrays.<UniqueKey<AlbumSongRecord>>asList(Keys.CONSTRAINT_E);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AlbumSongRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AlbumSongRecord, ?>>asList(Keys.FK_AS_ALBUM, Keys.FK_AS_SONG);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AlbumSong as(String alias) {
		return new AlbumSong(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AlbumSong rename(String name) {
		return new AlbumSong(name, null);
	}
}
