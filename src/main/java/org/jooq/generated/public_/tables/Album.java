/**
 * This class is generated by jOOQ
 */
package org.jooq.generated.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.records.AlbumRecord;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Album extends TableImpl<AlbumRecord> {

	private static final long serialVersionUID = 1068695860;

	/**
	 * The reference instance of <code>PUBLIC.ALBUM</code>
	 */
	public static final Album ALBUM = new Album();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AlbumRecord> getRecordType() {
		return AlbumRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ALBUM.ID</code>.
	 */
	public final TableField<AlbumRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ALBUM.YEAR</code>.
	 */
	public final TableField<AlbumRecord, Integer> YEAR = createField("YEAR", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.ALBUM</code> table reference
	 */
	public Album() {
		this("ALBUM", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ALBUM</code> table reference
	 */
	public Album(String alias) {
		this(alias, ALBUM);
	}

	private Album(String alias, Table<AlbumRecord> aliased) {
		this(alias, aliased, null);
	}

	private Album(String alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AlbumRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_3;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AlbumRecord>> getKeys() {
		return Arrays.<UniqueKey<AlbumRecord>>asList(Keys.CONSTRAINT_3);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Album as(String alias) {
		return new Album(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Album rename(String name) {
		return new Album(name, null);
	}
}
