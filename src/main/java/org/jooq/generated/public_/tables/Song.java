/**
 * This class is generated by jOOQ
 */
package org.jooq.generated.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.records.SongRecord;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Song extends TableImpl<SongRecord> {

	private static final long serialVersionUID = -1208570917;

	/**
	 * The reference instance of <code>PUBLIC.SONG</code>
	 */
	public static final Song SONG = new Song();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SongRecord> getRecordType() {
		return SongRecord.class;
	}

	/**
	 * The column <code>PUBLIC.SONG.ID</code>.
	 */
	public final TableField<SongRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SONG.TITLE</code>.
	 */
	public final TableField<SongRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.SONG</code> table reference
	 */
	public Song() {
		this("SONG", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.SONG</code> table reference
	 */
	public Song(String alias) {
		this(alias, SONG);
	}

	private Song(String alias, Table<SongRecord> aliased) {
		this(alias, aliased, null);
	}

	private Song(String alias, Table<SongRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SongRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_2;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SongRecord>> getKeys() {
		return Arrays.<UniqueKey<SongRecord>>asList(Keys.CONSTRAINT_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Song as(String alias) {
		return new Song(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Song rename(String name) {
		return new Song(name, null);
	}
}
